/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmory imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmory exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		Object.defineProperty(exports, name, {
/******/ 			configurable: false,
/******/ 			enumerable: true,
/******/ 			get: getter
/******/ 		});
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

eval("/*\n * jQuery Countdown - v1.2.8\n * http://github.com/kemar/jquery.countdown\n * Licensed MIT\n */\n\n(function ($, window, document, undefined) {\n\n    \"use strict\";\n\n    /*\n     * .countDown()\n     *\n     * Description:\n     *      Unobtrusive and easily skinable countdown jQuery plugin.\n     *\n     * Usage:\n     *      $(element).countDown()\n     *\n     *      $(element) is a valid <time> or any other HTML tag containing a text representation of a date/time\n     *      or duration remaining before a deadline expires.\n     *      If $(element) is a <time> tag, the datetime attribute is checked first.\n     *          <time datetime=\"2013-12-13T17:43:00\">Friday, December 13th, 2013 5:43pm</time>\n     *          <time>2012-12-08T14:30:00+0100</time>\n     *          <time>PT01H01M15S</time>\n     *          <h1>600 days, 3:59:12</h1>\n     *\n     *      The text representation of a date/time or duration can be:\n     *      - a valid duration string:\n     *          PT00M10S\n     *          PT01H01M15S\n     *          P2DT20H00M10S\n     *      - a valid global date and time string with its timezone offset:\n     *          2012-12-08T14:30:00.432+0100\n     *          2012-12-08T05:30:00-0800\n     *          2012-12-08T13:30Z\n     *      - a valid time string:\n     *          12:30\n     *          12:30:39\n     *          12:30:39.929\n     *      - a human readable duration string:\n     *          2h 0m\n     *          4h 18m 3s\n     *          24h00m59s\n     *          600 jours, 3:59:12\n     *          600 days, 3:59:12\n     *      - the output of a JavaScript Date.parse() parsable string:\n     *          Date.toDateString() => Sat Dec 20 2014\n     *          Date.toGMTString()  => Sat, 20 Dec 2014 09:24:00 GMT\n     *          Date.toUTCString()  => Sat, 20 Dec 2014 09:24:00 GMT\n     *\n     *      If $(element) is not a <time> tag, a new one is created and appended to $(element).\n     *\n     * Literature, resources and inspiration:\n     *      JavaScript Date reference:\n     *          https://developer.mozilla.org/docs/JavaScript/Reference/Global_Objects/Date\n     *      About the <time> element:\n     *          https://html.spec.whatwg.org/multipage/semantics.html#the-time-element\n     *          http://www.w3.org/TR/html5/text-level-semantics.html#the-time-element\n     *          http://wiki.whatwg.org/wiki/Time_element\n     *      <time> history:\n     *          http://www.brucelawson.co.uk/2012/best-of-time/\n     *          http://www.webmonkey.com/2011/11/w3c-adds-time-element-back-to-html5/\n     *      Formats:\n     *          http://en.wikipedia.org/wiki/ISO_8601\n     *      jQuery plugin syntax:\n     *          https://github.com/jquery-boilerplate/jquery-patterns\n     *          https://github.com/jquery-boilerplate/jquery-boilerplate/wiki/Extending-jQuery-Boilerplate\n     *          http://frederictonug.net/jquery-plugin-development-with-the-jquery-boilerplate\n     *\n     * Example of generated HTML markup:\n     *      <time class=\"countdown\" datetime=\"P12DT05H16M22S\">\n     *          <span class=\"item item-dd\">\n     *              <span class=\"dd\"></span>\n     *              <span class=\"label label-dd\">days</span>\n     *          </span>\n     *          <span class=\"separator separator-dd\">,</span>\n     *          <span class=\"item item-hh\">\n     *              <span class=\"hh-1\"></span>\n     *              <span class=\"hh-2\"></span>\n     *              <span class=\"label label-hh\">hours</span>\n     *          </span>\n     *          <span class=\"separator\">:</span>\n     *          <span class=\"item item-mm\">\n     *              <span class=\"mm-1\"></span>\n     *              <span class=\"mm-2\"></span>\n     *              <span class=\"label label-mm\">minutes</span>\n     *          </span>\n     *          <span class=\"separator\">:</span>\n     *          <span class=\"item item-ss\">\n     *              <span class=\"ss-1\"></span>\n     *              <span class=\"ss-2\"></span>\n     *              <span class=\"label label-ss\">seconds</span>\n     *          </span>\n     *      </time>\n     */\n\n    var pluginName = 'countDown';\n\n    var defaults = {\n        css_class: 'countdown',\n        always_show_days: false,\n        with_labels: true,\n        with_seconds: true,\n        with_separators: true,\n        with_hh_leading_zero: true,\n        with_mm_leading_zero: true,\n        with_ss_leading_zero: true,\n        label_dd: 'days',\n        label_hh: 'hours',\n        label_mm: 'minutes',\n        label_ss: 'seconds',\n        separator: ':',\n        separator_days: ','\n    };\n\n    function CountDown(element, options) {\n        this.element = $(element);\n        this.options = $.extend({}, defaults, options);\n        this._defaults = defaults;\n        this._name = pluginName;\n        this.init();\n    }\n\n    $.extend(CountDown.prototype, {\n\n        init: function () {\n            if (this.element.children().length) {\n                return;\n            }\n            if (this.element.attr('datetime')) {  // Try to parse the datetime attribute first.\n                this.endDate = this.parseEndDate(this.element.attr('datetime'));\n            }\n            if (this.endDate === undefined) {  // Fallback on the text content.\n                this.endDate = this.parseEndDate(this.element.text());\n            }\n            if (this.endDate === undefined) {  // Unable to parse a date.\n                return;\n            }\n            if (this.element.is('time')) {\n                this.timeElement = this.element;\n            } else {\n                this.timeElement = $('<time></time>');\n                this.element.html(this.timeElement);\n            }\n            this.markup();\n            this.setTimeoutDelay = this.sToMs(1);\n            this.daysVisible = true;\n            this.timeElement.on('time.elapsed', this.options.onTimeElapsed);\n            this.timeElement.on('time.tick', this.options.onTick);\n            this.doCountDown();\n        },\n\n        parseEndDate: function (str) {\n\n            var d;\n\n            d = this.parseDuration(str);\n            if (d instanceof Date) {\n                return d;\n            }\n\n            d = this.parseDateTime(str);\n            if (d instanceof Date) {\n                return d;\n            }\n\n            d = this.parseHumanReadableDuration(str);\n            if (d instanceof Date) {\n                return d;\n            }\n\n            // Try to parse a string representation of a date.\n            // https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Date/parse\n            d = Date.parse(str);\n            if (!isNaN(d)) {\n                return new Date(d);\n            }\n\n        },\n\n        // Convert a valid duration string representing a duration to a Date object.\n        //\n        // https://html.spec.whatwg.org/multipage/infrastructure.html#valid-duration-string\n        // http://en.wikipedia.org/wiki/ISO_8601#Durations\n        // i.e.: P2DT20H00M10S, PT01H01M15S, PT00M10S, P2D, P2DT20H00M10.55S\n        //\n        // RegExp:\n        // /^\n        //    P                     => duration designator (historically called \"period\")\n        //    (?:(\\d+)D)?           => (days) followed by the letter \"D\" (optional)\n        //    T?                    => the letter \"T\" that precedes the time components of the representation (optional)\n        //    (?:(\\d+)H)?           => (hours) followed by the letter \"H\" (optional)\n        //    (?:(\\d+)M)?           => (minutes) followed by the letter \"M\" (optional)\n        //    (\n        //         ?:(\\d+)          => (seconds) (optional)\n        //         (?:\\.(\\d{1,3}))? => (milliseconds) full stop character (.) and fractional part of second (optional)\n        //         S                => followed by the letter \"S\"\n        //    )?\n        // $/\n        parseDuration: function (str) {\n            var timeArray = str.match(/^P(?:(\\d+)D)?T?(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)(?:\\.(\\d{1,3}))?S)?$/);\n            if (timeArray) {\n                var d, dd, hh, mm, ss, ms;\n                dd = timeArray[1] ? this.dToMs(timeArray[1]) : 0;\n                hh = timeArray[2] ? this.hToMs(timeArray[2]) : 0;\n                mm = timeArray[3] ? this.mToMs(timeArray[3]) : 0;\n                ss = timeArray[4] ? this.sToMs(timeArray[4]) : 0;\n                ms = timeArray[5] ? parseInt(timeArray[5], 10) : 0;\n                d = new Date();\n                d.setTime(d.getTime() + dd + hh + mm + ss + ms);\n                return d;\n            }\n        },\n\n        // Convert a valid global date and time string to a Date object.\n        // https://html.spec.whatwg.org/multipage/infrastructure.html#valid-global-date-and-time-string\n        //\n        // 2012-12-08T13:30:39+0100\n        //     => [\"2012-12-08T13:30:39+0100\", \"2012\", \"12\", \"08\", \"13\", \"30\", \"39\", undefined, \"+0100\"]\n        // 2012-12-08T06:54-0800\n        //     => [\"2012-12-08T06:54-0800\", \"2012\", \"12\", \"08\", \"06\", \"54\", undefined, undefined, \"-0800\"]\n        // 2012-12-08 13:30Z\n        //     => [\"2012-12-08 13:30Z\", \"2012\", \"12\", \"08\", \"13\", \"30\", undefined, undefined, \"Z\"]\n        // 2013-12-08 06:54:39.929-10:30\n        //     => [\"2013-12-08 06:54:39.929-08:30\", \"2013\", \"12\", \"08\", \"06\", \"54\", \"39\", \"929\", \"-10:30\"]\n        //\n        // RegExp:\n        // ^\n        //     (\\d{4,})         => (year) (four or more ASCII digits)\n        //     -                => hyphen-minus\n        //     (\\d{2})          => (month)\n        //     -                => hyphen-minus\n        //     (\\d{2})          => (day)\n        //     [T\\s]            => T or space\n        //     (\\d{2})          => (hours)\n        //     :                => colon\n        //     (\\d{2})          => (minutes)\n        //     (?:\\:(\\d{2}))?   => colon and (seconds) (optional)\n        //     (?:\\.(\\d{1,3}))? => full stop character (.) and fractional part of second (milliseconds) (optional)\n        //     ([Z\\+\\-\\:\\d]+)?  => time-zone (offset) string (optional)\n        // $\n        parseDateTime: function (str) {\n            var timeArray = str.match(\n                /^(\\d{4,})-(\\d{2})-(\\d{2})[T\\s](\\d{2}):(\\d{2})(?:\\:(\\d{2}))?(?:\\.(\\d{1,3}))?([Z\\+\\-\\:\\d]+)?$/);\n            if (timeArray) {\n\n                // Convert UTC offset from string to milliseconds.\n                // +01:00 => [\"+01:00\", \"+\", \"01\", \"00\"] => -360000\n                // -08:00 => [\"-08:00\", \"-\", \"08\", \"00\"] => 28800000\n                // +05:30 => [\"+05:30\", \"+\", \"05\", \"30\"] => -19800000\n                var offset = timeArray[8] ? timeArray[8].match(/^([\\+\\-])?(\\d{2}):?(\\d{2})$/) : undefined;\n\n                // Time difference between UTC and the given time zone in milliseconds.\n                var utcOffset = 0;\n                if (offset) {\n                    utcOffset = this.hToMs(offset[2]) + this.mToMs(offset[3]);\n                    utcOffset = (offset[1] === '-') ? utcOffset : -utcOffset;\n                }\n\n                var d, yy, mo, dd, hh, mm, ss, ms;\n                yy = timeArray[1];\n                mo = timeArray[2] - 1;\n                dd = timeArray[3];\n                hh = timeArray[4] || 0;\n                mm = timeArray[5] || 0;\n                ss = timeArray[6] || 0;\n                ms = timeArray[7] || 0;\n                d = new Date(Date.UTC(yy, mo, dd, hh, mm, ss, ms));\n\n                d.setTime(d.getTime() + utcOffset);\n\n                return d;\n\n            }\n        },\n\n        // Convert a string representing a human readable duration to a Date object.\n        // Hours and minutes are mandatory.\n        //\n        // 600 days, 3:59:12 => [\"600 days, 3:59:12\", \"600\", \"3\", \"59\", \"12\", undefined]\n        //           3:59:12 => [\"3:59:12\", undefined, \"3\", \"59\", \"12\", undefined]\n        //             00:01 => [\"00:01\", undefined, \"00\", \"01\", undefined, undefined]\n        //          00:00:59 => [\"00:00:59\", undefined, \"00\", \"00\", \"59\", undefined]\n        //         240:00:59 => [\"240:00:59\", undefined, \"240\", \"00\", \"59\", undefined]\n        //         4h 18m 3s => [\"4h 18m 3s\", undefined, \"4\", \"18\", \"3\", undefined]\n        //     1d 0h 00m 59s => [\"1d 0h 00m 59s\", \"1\", \"0\", \"00\", \"59\", undefined]\n        //             2h 0m => [\"2h 0m\", undefined, \"2\", \"0\", undefined, undefined]\n        //         24h00m59s => [\"24h00m59s\", undefined, \"24\", \"00\", \"59\", undefined]\n        //      12:30:39.929 => [\"12:30:39.929\", undefined, \"12\", \"30\", \"39\", \"929\"]\n        //\n        // RegExp:\n        // /^\n        //     (?:(\\d+).+\\s)?   => (days) followed by any character 0 or more times and a space (optional)\n        //     (\\d+)[h:]\\s?     => (hours) followed by \"h\" or \":\" and an optional space\n        //     (\\d+)[m:]?\\s?    => (minutes) followed by \"m\" or \":\" and an optional space\n        //     (\\d+)?[s]?       => (seconds) followed by an optional space (optional)\n        //     (?:\\.(\\d{1,3}))? => (milliseconds) full stop character (.) and fractional part of second (optional)\n        // $/\n        parseHumanReadableDuration: function (str) {\n            var timeArray = str.match(/^(?:(\\d+).+\\s)?(\\d+)[h:]\\s?(\\d+)[m:]?\\s?(\\d+)?[s]?(?:\\.(\\d{1,3}))?$/);\n            if (timeArray) {\n                var d, dd, hh, mm, ss, ms;\n                d = new Date();\n                dd = timeArray[1] ? this.dToMs(timeArray[1]) : 0;\n                hh = timeArray[2] ? this.hToMs(timeArray[2]) : 0;\n                mm = timeArray[3] ? this.mToMs(timeArray[3]) : 0;\n                ss = timeArray[4] ? this.sToMs(timeArray[4]) : 0;\n                ms = timeArray[5] ? parseInt(timeArray[5], 10) : 0;\n                d.setTime(d.getTime() + dd + hh + mm + ss + ms);\n                return d;\n            }\n        },\n\n        // Convert seconds to milliseconds.\n        sToMs: function (s) {\n            return parseInt(s, 10) * 1000;\n        },\n\n        // Convert minutes to milliseconds.\n        mToMs: function (m) {\n            return parseInt(m, 10) * 60 * 1000;\n        },\n\n        // Convert hours to milliseconds.\n        hToMs: function (h) {\n            return parseInt(h, 10) * 60 * 60 * 1000;\n        },\n\n        // Convert days to milliseconds.\n        dToMs: function (d) {\n            return parseInt(d, 10) * 24 * 60 * 60 * 1000;\n        },\n\n        // Extract seconds (0-59) from the given timedelta expressed in milliseconds.\n        // A timedelta represents a duration, the difference between two dates or times.\n        msToS: function (ms) {\n            return parseInt((ms / 1000) % 60, 10);\n        },\n\n        // Extract minutes (0-59) from the given timedelta expressed in milliseconds.\n        msToM: function (ms) {\n            return parseInt((ms / 1000 / 60) % 60, 10);\n        },\n\n        // Extract hours (0-23) from the given timedelta expressed in milliseconds.\n        msToH: function (ms) {\n            return parseInt((ms / 1000 / 60 / 60) % 24, 10);\n        },\n\n        // Extract the number of days from the given timedelta expressed in milliseconds.\n        msToD: function (ms) {\n            return parseInt((ms / 1000 / 60 / 60 / 24), 10);\n        },\n\n        markup: function () {\n            // Prepare the HTML content of the <time> element.\n            var html = [\n                '<span class=\"item item-dd\">',\n                    '<span class=\"dd\"></span>',\n                    '<span class=\"label label-dd\">', this.options.label_dd, '</span>',\n                '</span>',\n                '<span class=\"separator separator-dd\">', this.options.separator_days, '</span>',\n                '<span class=\"item item-hh\">',\n                    '<span class=\"hh-1\"></span>',\n                    '<span class=\"hh-2\"></span>',\n                    '<span class=\"label label-hh\">', this.options.label_hh, '</span>',\n                '</span>',\n                '<span class=\"separator\">', this.options.separator, '</span>',\n                '<span class=\"item item-mm\">',\n                    '<span class=\"mm-1\"></span>',\n                    '<span class=\"mm-2\"></span>',\n                    '<span class=\"label label-mm\">', this.options.label_mm, '</span>',\n                '</span>',\n                '<span class=\"separator\">', this.options.separator, '</span>',\n                '<span class=\"item item-ss\">',\n                    '<span class=\"ss-1\"></span>',\n                    '<span class=\"ss-2\"></span>',\n                    '<span class=\"label label-ss\">', this.options.label_ss, '</span>',\n                '</span>'\n            ];\n            this.timeElement.html(html.join(''));\n            // Customize HTML according to options.\n            if (!this.options.with_labels) {\n                this.timeElement.find('.label').remove();\n            }\n            if (!this.options.with_separators) {\n                this.timeElement.find('.separator').remove();\n            }\n            if (!this.options.with_seconds) {\n                this.timeElement.find('.item-ss').remove();\n                this.timeElement.find('.separator').last().remove();\n            }\n            // Cache elements.\n            this.item_dd       = this.timeElement.find('.item-dd');\n            this.separator_dd  = this.timeElement.find('.separator-dd');\n            this.remaining_dd  = this.timeElement.find('.dd');\n            this.remaining_hh1 = this.timeElement.find('.hh-1');\n            this.remaining_hh2 = this.timeElement.find('.hh-2');\n            this.remaining_mm1 = this.timeElement.find('.mm-1');\n            this.remaining_mm2 = this.timeElement.find('.mm-2');\n            this.remaining_ss1 = this.timeElement.find('.ss-1');\n            this.remaining_ss2 = this.timeElement.find('.ss-2');\n            // Set the css class of the <time> element.\n            this.timeElement.addClass(this.options.css_class);\n        },\n\n        doCountDown: function () {\n            // Calculate the difference between the two dates in milliseconds.\n            var ms = this.endDate.getTime() - new Date().getTime();\n            // Extract seconds, minutes, hours and days from the timedelta expressed in milliseconds.\n            var ss = this.msToS(ms);\n            var mm = this.msToM(ms);\n            var hh = this.msToH(ms);\n            var dd = this.msToD(ms);\n            // Prevent display of negative values.\n            if (ms <= 0) {\n                ss = mm = hh = dd = 0;\n            }\n            // Update display.\n            // Use a space instead of 0 when no leading zero is required.\n            this.displayRemainingTime({\n                'ss': ss < 10 ? (this.options.with_ss_leading_zero ? '0' : ' ') + ss.toString() : ss.toString(),\n                'mm': mm < 10 ? (this.options.with_mm_leading_zero ? '0' : ' ') + mm.toString() : mm.toString(),\n                'hh': hh < 10 ? (this.options.with_hh_leading_zero ? '0' : ' ') + hh.toString() : hh.toString(),\n                'dd': dd.toString()\n            });\n            // If seconds are hidden, stop the counter as soon as there is no minute left.\n            if (!this.options.with_seconds && dd === 0 && mm === 0 && hh === 0) {\n                ss = 0;\n            }\n            if (dd === 0 && mm === 0 && hh === 0 && ss === 0) {\n                return this.timeElement.trigger('time.elapsed');\n            }\n            // Reload it.\n            var self = this;\n            window.setTimeout(function () { self.doCountDown(); }, self.setTimeoutDelay);\n            return this.timeElement.trigger('time.tick', ms);\n        },\n\n        /**\n         * Display the remaining time.\n         *\n         * @param {Object} remaining - an object literal containing a string representation\n         * of days, hours, minutes and seconds remaining.\n         * E.g. with leading zeros:\n         * { dd: \"600\", hh: \"03\", mm: \"59\", ss: \"11\" }\n         * Or without leading zeros:\n         * { dd: \"600\", hh: \" 3\", mm: \" 9\", ss: \"11\" }\n         */\n        displayRemainingTime: function (remaining) {\n            // Format the datetime attribute of the <time> element to an ISO 8601 duration.\n            // https://html.spec.whatwg.org/multipage/semantics.html#datetime-value\n            // I.e.: <time datetime=\"P2DT00H00M30S\">2 00:00:00</time>\n            var attr = [];\n            attr.push('P');\n            if (remaining.dd !== '0') {\n                attr.push(remaining.dd, 'D');\n            }\n            attr.push('T', remaining.hh, 'H', remaining.mm, 'M');\n            if (this.options.with_seconds) {\n                attr.push(remaining.ss, 'S');\n            }\n            this.timeElement.attr('datetime', attr.join(''));\n            // Remove days if necessary.\n            if (this.daysVisible && !this.options.always_show_days && remaining.dd === '0') {\n                this.item_dd.remove();\n                this.separator_dd.remove();\n                this.daysVisible = false;\n            }\n            // Update countdown values.\n            // Use `trim` to convert spaces to empty string when there are no leading zeros.\n            this.remaining_dd.text(remaining.dd);\n            this.remaining_hh1.text(remaining.hh[0].trim());\n            this.remaining_hh2.text(remaining.hh[1]);\n            this.remaining_mm1.text(remaining.mm[0].trim());\n            this.remaining_mm2.text(remaining.mm[1]);\n            this.remaining_ss1.text(remaining.ss[0].trim());\n            this.remaining_ss2.text(remaining.ss[1]);\n        }\n\n    });\n\n    $.fn[pluginName] = function (options) {\n\n        var args = arguments;\n\n        // If the first parameter is an object (options) or was omitted, instantiate a new plugin instance.\n        if (options === undefined || typeof options === 'object') {\n            return this.each(function () {\n                if (!$.data(this, 'plugin_' + pluginName)) {\n                    $.data(this, 'plugin_' + pluginName, new CountDown(this, options));\n                }\n            });\n        }\n\n        // Allow any public function (i.e. a function whose name isn't 'init' or doesn't start with an underscore)\n        // to be called via the jQuery plugin, e.g. $(element).countDown('functionName', arg1, arg2).\n        else if (typeof options === 'string' && options[0] !== '_' && options !== 'init') {\n\n            // Cache the method call to make it possible to return a value.\n            var returns;\n\n            this.each(function () {\n                var instance = $.data(this, 'plugin_' + pluginName);\n\n                // Tests that there's already a plugin instance and checks that the requested public method exists.\n                if (instance instanceof CountDown && typeof instance[options] === 'function') {\n                    // Call the method of our plugin instance, and pass it the supplied arguments.\n                    returns = instance[options].apply(instance, Array.prototype.slice.call(args, 1));\n                }\n\n                // Allow instances to be destroyed via the 'destroy' method.\n                if (options === 'destroy') {\n                    $.data(this, 'plugin_' + pluginName, null);\n                }\n\n            });\n\n            // If the earlier cached method gives a value back return the value,\n            // otherwise return this to preserve chainability.\n            return returns !== undefined ? returns : this;\n\n        }\n\n    };\n\n})(window.jQuery, window, document);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }
/******/ ]);